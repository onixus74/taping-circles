Build Buddy
===========
Build Buddy is a Unity3d plugin which streamlines the iOS build process, and provides an editor window for modifying Android Manifests.

Xcode Editor
============

The Xcode editor will automatically add designated files and frameworks along with Info.plist entries into the Unity Xcode project when it is generated by Unity.

Setup
Import the Unity Package into your project and open the Xcode Editor Window.  The window can be found in Unity under Windows => Build Buddy => Xcode Project Editor. The editor saves its settings to "BuildBuddyiOS.xml".  This file is automatically generated the first time you use the editor window, and is saved in the BuildBuddy/iOS/Editor folder.  You can move this file where ever you like.

Build Buddy expects Unity 4.X and Xcode 5.

Usage

If you build targeting iOS, Build Buddy's XcodePostProcessBuild script will run and modify the Xcode project.  This will add all files, frameworks, and plist entries added via the Xcode Editor window to the generated Xcode project

Although the editor window displays the absolute path, all custom files have their paths stored relative to your projects' Assets folder. This means that there are two options when using Build Buddy with a team.

  1.  Everyone must have their copy of the included files in the same place relative to the project's Assets folder 
  
  OR
  
  2.  Everyone must set up Build Buddy's import settings locally
  
When you open the Xcode Project Editor window, a file's name will be displayed in red if it could not be found at the given location.
  
SDK files have their paths stored relative to your Xcode.app's SDK.  This lets build-buddy automatically swap between the simulator and device version of the SDK depending on your unity build settings.

You must press the green Apply Changes button when you wish to save the settings you made to the Xcode Project Window.  Your new settings will only affect the generated project after you have hit this button.  The red cancel changes button will reset the state of the window to that of the last time you applied your changes.  Building the project or closing the window will also reset all changes you have made and have not applied.

When building from Unity using Build Buddy you cannot build using Build and Run, and if you are prompted to either append or replace an existing project, you must choose to replace.

If you click the Save as Template button, all the settings currently in the window will be saved to your Editor Preferences.  You can then click the import button at anytime to merge those settings into this project or into a future one.

File Import

The Add File button will add a single file to the project, while the Add Folder button will add all files in a folder non-recursively.  The mac file system treats frameworks as folders, so to add a custom framework to your Xcode project you must select it using the Add Folder button.  You may select the framework itself to import it individually

If you wish to add a framework or library from the iOS SDK, select "Add iOS SDK File".  You will have to choose the desired SDK file from a drop down of options pulled from your installed SDK.  This drop down can be filtered using the text area next to it.  For iOS SDK files, you will not have to make any changes to these import settings when you change your build settings from device to simulator.  The correct SDK will be used automatically.

If you wish to add a header search path or a library search path, click the corresponding button.  You may enter the path relative to the Assets folder manually, or you may click the set button to open a file browser.

The "File Import Group" field will automatically set the Xcode group of all future imported files. For example if you enter "Classes" into the field and then Add a folder, all of the files in the folder will be imported and will have their group set to "Classes".  It will create a new group if the specified group doesn't already exist.  iOS SDK files are automatically added to the "Frameworks" group.  

You can add additional linker flags in the designated text area.  Flags should be separated by a space.

To specify the group, compiler flags, or required status of a single file, open their individual foldout listing and edit those fields.

Plist Editing

To Add a plist entry to your Xcode project, you should click the Plist entry button. The key field of the entry must be set to the actual name of the value rather than the name it is listed under in Xcode For example, you should enter "CFBundleDevelopmentRegion" rather than "Localization native development region".

Resources
http://www.monobjc.net/xcode-project-file-format.html

http://danwright.info/blog/2010/10/xcode-pbxproject-files/

https://developer.apple.com/library/ios/documentation/general/Reference/InfoPlistKeyReference/Articles/AboutInformationPropertyListFiles.html

AndroidManifest Editor
======================

The AndroidManifest Editor is a WYSIWYG xml editor which allows for making quick changes to Android Manifests from within Unity.

Setup
-----

After you import the Unity package, the android manifest editor can be found in Unity under Windows => Build Buddy => AndroidManifest Editor

The editor will find your custom AndroidManifest at Assets/Plugins/Android/AndroidManifest.xml.  If you do not have a manifest or a Plugins/Android directory, the window will build one for you.  

Usage
-----

The Android Manifest is a WYSIWYG Editor.  If you wish to add or modify a certain element, select the element type's foldout.  All of the attributes and fields available according to http://developer.android.com/guide/topics/manifest/manifest-intro.html as of Android API level 19 (KitKat) are available for editing.  Most of the fields are optional and will only appear in the Manifest if their value is changed from the default.

The editor does not support editing activity-alias, compatible-screens, instrumentation, manifest, permission-group, permission-tree, supports-gl-texture, supports-screens, or uses-sdk elements. 

When you have made changes you must hit the green Apply Changes button.  This will update your local AndroidManifest.  Then, when you build, this manifest will be merged with the one generated by Unity.

If you click the Save as Template button, your current manifest will be saved to your Editor Preferences.  You can then click the import button at anytime to merge this manifest into this project or into a future one.